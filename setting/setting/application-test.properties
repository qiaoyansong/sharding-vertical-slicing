# sharding-jdbc https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/

# 1、配置数据源
# 真实数据源名称，多个数据源用逗号区分
spring.shardingsphere.datasource.names=order,user

# 数据源配置
spring.shardingsphere.datasource.order.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.order.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.order.url=jdbc:mysql://localhost:3302/db_order?serverTimeZone=GMT
spring.shardingsphere.datasource.order.username=root
spring.shardingsphere.datasource.order.password=qiao683586890
# ... 数据库连接池的其它属性 需要注意的是不同连接池的属性名字xxx可能不同 如果换了连接池需要修改
# spring.shardingsphere.datasource.<spring.shardingsphere.datasource.name>.<xxx>=

spring.shardingsphere.datasource.user.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.user.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.user.url=jdbc:mysql://localhost:3301/db_user?serverTimeZone=GMT
spring.shardingsphere.datasource.user.username=root
spring.shardingsphere.datasource.user.password=qiao683586890
# ... 数据库连接池的其它属性 需要注意的是不同连接池的属性名字xxx可能不同 如果换了连接池需要修改
# spring.shardingsphere.datasource.<spring.shardingsphere.datasource.name>.<xxx>=

# 2、分片表配置
# 2.1、逻辑 -> 真实节点 对应关系配置
## 配置表的分布情况 由数据源名(上面配置的数据源名称)+表名(数据库中的真实表名)组成，以小数点分隔。
## 多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
## <table-name> 为逻辑表名(即SQL中的表名) 一个逻辑表可能对应多个真实节点>
## spring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes=
# 代表的意思是t_order这张表包含一个真实节点 即数据源order中的真实表t_order
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=order.t_order
# 代表的意思是t_user这张表包含一个真实节点 即数据源user中的真实表t_user
spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=user.t_user

# 2.2、分库/分表 策略配置

# 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
# 用于单分片键的标准分片场景
## spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-column= # 分片列名称
## spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-algorithm-name= # 分片算法名称
# 用于多分片键的复合分片场景
## spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-columns= # 分片列名称，多个列以逗号分隔
## spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-algorithm-name= # 分片算法名称
# 用于 Hint 的分片策略
## spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.sharding-algorithm-name= # 分片算法名称

# 分表策略，同分库策略
# spring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # 省略

# 分片算法配置 https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/
# 分片算法类型
# spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type=
# 分片算法属性配置
# spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx=

# 2.2、自定义主键 策略配置
# 分布式序列策略配置 https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/keygen/
# spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # 分布式序列列名称
# spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # 分布式序列算法名称
# 分布式序列算法配置
# spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # 分布式序列算法类型
# spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法属性配置


# 默认数据库分片策略
# spring.shardingsphere.sharding.default-database-strategy.xxx=
# 默认表分片策略
# spring.shardingsphere.sharding.default-table-strategy.xxx=
# 默认自定义主键生成策略
# spring.shardingsphere.sharding.default-key-generate-strategy.xxx=
# 默认分片列名称
# spring.shardingsphere.sharding.default-sharding-column=

# 打印SQL
spring.shardingsphere.props.sql-show=true

# rocketmq
rocketmq.name-server=127.0.0.1:9876
rocketmq.producer.group=group1
rocketmq.topic.test=testTopic

# jedis
jedis.host=10.96.97.141
jedis.port=6379

# http
http.maxConnectPerRoute=2
http.maxTotalConnect=4
http.connectTimeout=1000
http.readTimeout=1000
http.connectionRequestTimeout=10000
sayHello-api=http://localhost:8888/hello/say/hello
test-getUrl=http://localhost:8888/hello/say/hi
test-postUrl=http://localhost:8888/hello/say/hello

# es
es.hostName=localhost
es.port=9200
es.merchant.index.name=merchant
es.userName=elastic
es.password=evzGBX*v_SlpKPgn0820